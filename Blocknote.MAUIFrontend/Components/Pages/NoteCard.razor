@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt

@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<div class="note-card">
    <div class="note-card-content" @onclick="() => { OpenOperatorPage(); }">
        <span class="note-card-title">@Model.Title</span>
        @if (!string.IsNullOrEmpty(Model.Subtitle))
        {
            <span class="note-card-subtitle">@Model.Subtitle</span>
        }
        <span class="note-card-date">@Model.UpdatedAt</span>
    </div>
</div>

@if (ShowModal)
{
    <NoteModal Id="@Model.Id"
    Title="@LocalTitle"
    Subtitle="@LocalSubtitle"
    Content="@LocalContent"
    OnCloseModal="CloseModal"
    OnNoteDeleted="HandleNoteDeleted" />
}

@code {
    [Parameter] public NoteDto Model { get; set; } = new();
    [Parameter] public EventCallback OnNoteDeleted { get; set; }

    [Inject] AuthValidator AuthValidator { get; set; }

    private bool ShowModal { get; set; } = false;
    private bool ShowDeleteConfirmation { get; set; } = false;

    private string LocalTitle { get; set; } = string.Empty;
    private string LocalSubtitle { get; set; } = string.Empty;
    private string LocalContent { get; set; } = string.Empty;

    private async Task OpenNote()
    {
        LocalTitle = Model.Title;
        LocalSubtitle = Model.Subtitle;
        LocalContent = Model.Content;
        ShowModal = true;
    }

    private async Task ShowEditModal()
    {
        LocalTitle = Model.Title;
        LocalSubtitle = Model.Subtitle;
        LocalContent = Model.Content;
        ShowModal = true;
    }

    private void ConfirmDeleteNote() => ShowDeleteConfirmation = true;

    private async Task ConfirmDelete()
    {
        await DeleteNote();
        ShowDeleteConfirmation = false;
    }

    private void CancelDelete() => ShowDeleteConfirmation = false;

    private async Task DeleteNote()
    {
        try
        {
            (bool result, Guid userId) = await AuthValidator.ValidateUser();
            if (!result) NavigationManager.NavigateTo("auth");

            var resultOperation = await NoteService.DeleteAsync(userId, Model.Id);
            if (resultOperation)
            {
                await OnNoteDeleted.InvokeAsync();
            }
        }
        catch
        {
        }
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void OpenOperatorPage()
    {
        NavigationManager.NavigateTo($"/edit/{Model.Id}");
    }

    private async Task HandleNoteDeleted()
    {
        await OnNoteDeleted.InvokeAsync();
    }
}