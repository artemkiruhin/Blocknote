@page "/auth"
@using Blocknote.MAUIFrontend.Components.Layout
@using System.ComponentModel.DataAnnotations
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Hasher
@using Blocknote.Core.Services.Jwt

@layout AuthLayout

@inject IUserService UserService
@inject IJwtService JwtService
@inject IHashService HashService

<div class="auth-page">
    <div class="auth-content">
        <div class="brand-section">
            <div class="brand-icon">
                <i class="fas fa-user-circle"></i>
            </div>
            <h1 class="brand-title">@(IsLogin ? "С возвращением!" : "Создать аккаунт")</h1>
            <p class="brand-subtitle">@(IsLogin ? "Войдите для продолжения" : "Заполните данные для регистрации")</p>
        </div>

        <div class="auth-tabs">
            <button @onclick="() => ToggleAuthMode(true)"
                    class="auth-tab @(IsLogin ? "active" : "")">
                <i class="fas fa-sign-in-alt"></i>
                <span>Вход</span>
            </button>
            <button @onclick="() => ToggleAuthMode(false)"
                    class="auth-tab @(!IsLogin ? "active" : "")">
                <i class="fas fa-user-plus"></i>
                <span>Регистрация</span>
            </button>
        </div>

        <EditForm Model="@authModel" OnValidSubmit="HandleSubmit" class="auth-form">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    @ErrorMessage
                </div>
            }

            <div class="form-group">
                <i class="fas fa-user input-icon"></i>
                <InputText @bind-Value="authModel.Username"
                           class="form-input"
                           id="username"
                           placeholder="Имя пользователя" />
                <ValidationMessage For="@(() => authModel.Username)" />
            </div>

            <div class="form-group">
                <i class="fas fa-lock input-icon"></i>
                <InputText type="password"
                           @bind-Value="authModel.Password"
                           class="form-input"
                           id="password"
                           placeholder="Пароль" />
                <ValidationMessage For="@(() => authModel.Password)" />
            </div>

            @if (!IsLogin)
            {
                <div class="form-group">
                    <i class="fas fa-lock input-icon"></i>
                    <InputText type="password"
                               @bind-Value="authModel.ConfirmPassword"
                               class="form-input"
                               id="confirm-password"
                               placeholder="Подтверждение пароля" />
                    <ValidationMessage For="@(() => authModel.ConfirmPassword)" />
                </div>
            }

            <button type="submit" class="submit-btn">
                <span>@(IsLogin ? "Войти" : "Зарегистрироваться")</span>
                <i class="fas fa-arrow-right"></i>
            </button>
        </EditForm>
    </div>
</div>

@code {
    private AuthModel authModel = new();
    private bool IsLogin { get; set; } = true;
    private string ErrorMessage { get; set; } = string.Empty;

    private void ToggleAuthMode(bool isLogin)
    {
        IsLogin = isLogin;
        ErrorMessage = string.Empty;
        authModel = new AuthModel();
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (IsLogin)
            {
                await LoginAsync();
            }
            else
            {
                await RegisterAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Произошла ошибка: " + ex.Message;
        }
    }

    private async Task LoginAsync()
    {
        var hashedPassword = HashService.Compute(authModel.Password);

        var user = await UserService.GetByUsernameAndPasswordAsync(authModel.Username, hashedPassword);
        if (user != null)
        {
            var token = JwtService.GenerateToken(user.Id);
            await SecureStorage.Default.SetAsync("jwt", token);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Неверное имя пользователя или пароль.";
        }
    }

    private async Task RegisterAsync()
    {
        var existingUser = await UserService.GetByUsernameAndPasswordAsync(authModel.Username, string.Empty);


        if (existingUser != null)
        {
            ErrorMessage = "Пользователь с таким именем уже существует.";
            return;
        }

        if (authModel.Password != authModel.ConfirmPassword)
        {
            ErrorMessage = "Пароли не совпадают.";
            return;
        }

        var hashedPassword = HashService.Compute(authModel.Password);
        var success = await UserService.Register(authModel.Username, hashedPassword);

        Console.WriteLine(hashedPassword);

        if (success)
        {
            IsLogin = true;
            ErrorMessage = "Регистрация успешно завершена. Теперь вы можете войти.";
        }
        else
        {
            ErrorMessage = "Не удалось зарегистрировать пользователя. Попробуйте позже.";
        }
    }

    public class AuthModel
    {
        [Required(ErrorMessage = "Имя пользователя обязательно")]
        [StringLength(50, ErrorMessage = "Имя пользователя не должно превышать 50 символов")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Пароль обязателен")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Пароль должен быть от 6 до 100 символов")]
        public string Password { get; set; } = string.Empty;

        //[Compare(nameof(Password), ErrorMessage = "Пароли не совпадают")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    [Inject] private NavigationManager NavigationManager { get; set; }
}