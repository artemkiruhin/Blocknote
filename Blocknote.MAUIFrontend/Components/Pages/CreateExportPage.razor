@page "/export"
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt
@using System.Diagnostics
@using System.Text.Json
@using System.Text.Encodings.Web
@inject NavigationManager NavigationManager
@inject INoteService NoteService
@inject IJwtService JwtService

<div class="export-container">
    <div class="export-card">
        <!-- Кнопка назад -->
        <div class="back-button-container">
            <button class="back-button" @onclick="ReturnToPreviousPage">
                <i class="fas fa-arrow-left"></i>
            </button>
        </div>

        <div class="export-header">
            <i class="fas fa-file-export fa-3x export-icon"></i>
            <h2>Экспорт данных</h2>
            <p class="export-subtitle">Выберите формат для экспорта ваших данных</p>
        </div>

        <div class="export-actions">
            <button class="export-button" @onclick="ExportToJson">
                <i class="fas fa-file-code"></i>
                Экспорт в JSON
                <span class="button-hover-effect"></span>
            </button>
        </div>

        <div class="export-info">
            <i class="fas fa-info-circle"></i>
            <p>Экспортированные данные будут содержать всю информацию в выбранном формате</p>
        </div>
    </div>
</div>

@code {
    private async Task ExportToJson()
    {
        var token = await SecureStorage.Default.GetAsync("jwt");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("auth");
            return;
        }

        var userId = JwtService.GetUserId(token);
        if (userId == Guid.Empty)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var notes = await NoteService.GetAllAsync(userId);
        var jsonNoteList = System.Text.Json.JsonSerializer.Serialize(notes, new JsonSerializerOptions { WriteIndented = true, Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping});

        var sanitizedFileName = $"Export-{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.json";
        var documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        var exportPath = Path.Combine(documentsPath, "Blocknote", "Exports");
        Directory.CreateDirectory(exportPath);

        var filePath = Path.Combine(exportPath, sanitizedFileName);
        await File.WriteAllTextAsync(filePath, jsonNoteList);

        await Application.Current.MainPage.DisplayAlert("Успешно", $"Файл сохранён в {filePath}", "OK");

        Process.Start(new ProcessStartInfo
            {
                FileName = exportPath,
                UseShellExecute = true
            });
    }


    private void ReturnToPreviousPage()
    {
        NavigationManager.NavigateTo("/"); 
    }
}