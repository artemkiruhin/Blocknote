@page "/"
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt

@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<Header OnAddNote="ShowCreateNoteModal" />

<div class="container">
    @if (IsLoading)
    {
        <div class="loading-state">Загрузка заметок...</div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    else if (Notes.Count > 0)
    {
        <div class="note-list">
            @foreach (var note in Notes)
            {
                <div class="note-card">
                    <NoteCard Model="note" OnNoteDeleted="RefreshNotes" />
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <p>Создайте свою первую заметку</p>
            <button class="add-note-btn" @onclick="ShowCreateNoteModal">Новая заметка</button>
        </div>
    }
</div>

@if (ShowModal)
{
    <NoteModal OnNoteCreated="RefreshNotes" OnClose="CloseModal" />
}

@code {
    private List<NoteDto> Notes { get; set; } = new();
    private string? ErrorMessage { get; set; }
    private bool ShowModal { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await InitializeNotes();
    }

    private async Task InitializeNotes()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigateToLogin();
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                SetError("Ошибка авторизации. Пожалуйста, выполните вход.");
                return;
            }

            var notes = await NoteService.GetAllAsync(userId);
            Notes = notes?.ToList() ?? new List<NoteDto>();
        }
        catch (Exception ex)
        {
            SetError($"Ошибка загрузки заметок: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ShowCreateNoteModal() => ShowModal = true;

    private void CloseModal() => ShowModal = false;

    private async Task RefreshNotes() => await InitializeNotes();

    private void SetError(string message) => ErrorMessage = message;

    private void NavigateToLogin() => NavigationManager.NavigateTo("auth");
}