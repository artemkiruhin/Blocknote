@page "/sharing"
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Sharing
@using Blocknote.Core.Services.Jwt
@inject ISharingService SharingService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<div class="header">
    <div class="actions">
        <button class="menu-btn back-btn" @onclick="NavigateToHome">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M19 12H5M12 19l-7-7 7-7"/>
            </svg>
        </button>
        <h1>Шаринги</h1>
    </div>
</div>

<div class="container">
    @if (IsLoading)
    {
            <div class="loading-state">Загрузка шарингов...</div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
            <div class="alert alert-danger">@ErrorMessage</div>
    }
    else if (Sharings.Count > 0)
    {
        @foreach (var sharing in Sharings)
        {
                    <div class="note-card">
                        <div class="note-card-title">@sharing.Title</div>
                        <div class="note-card-subtitle">@sharing.Subtitle</div>
                        <div class="sharing-info">
                            <div class="sharing-author">Автор: @sharing.AuthorUsername</div>
                            <div class="sharing-type">Тип доступа: @sharing.Type</div>
                            <div class="sharing-dates">
                                <div>Создано: @sharing.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
                                <div>Действует до: @sharing.CloseAt.ToString("dd.MM.yyyy HH:mm")</div>
                            </div>
                        </div>
                        <div class="sharing-actions">
                            <button class="sharing-btn copy" @onclick="() => CopyShareLink(sharing.Id)">
                                Копировать ссылку
                            </button>
                            <button class="sharing-btn delete" @onclick="() => DeleteSharing(sharing.Id.ToString())">
                                Удалить
                            </button>
                        </div>
                    </div>
        }
    }
    else
    {
            <div class="empty-state">
                <p>У вас пока нет общих заметок</p>
            </div>
    }
</div>

@code {
    private List<SharingNoteDto> Sharings { get; set; } = new();
    private string? ErrorMessage { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSharings();
    }

    private async Task InitializeSharings()
    {
        IsLoading = true;
        ErrorMessage = null;
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigateToLogin();
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                SetError("Ошибка авторизации. Пожалуйста, выполните вход.");
                return;
            }

            var sharings = await SharingService.GetSharingsAsync(userId);
            Sharings = sharings?.ToList() ?? new List<SharingNoteDto>();
        }
        catch (Exception ex)
        {
            SetError($"Ошибка загрузки шарингов: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task DeleteSharing(string code)
    {
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            var userId = JwtService.GetUserId(token);
            await SharingService.DeleteSharingCodeAsync(code, userId);
            await InitializeSharings();
        }
        catch (Exception ex)
        {
            SetError($"Ошибка удаления шаринга: {ex.Message}");
        }
    }

    private async Task CopyShareLink(Guid sharingId)
    {
        try
        {
            var shareLink = $"{NavigationManager.BaseUri}share/{sharingId}";
            await Clipboard.SetTextAsync(shareLink);
        }
        catch (Exception ex)
        {
            SetError("Не удалось скопировать ссылку");
        }
    }

    private void NavigateToHome() => NavigationManager.NavigateTo("/");
    private void SetError(string message) => ErrorMessage = message;
    private void NavigateToLogin() => NavigationManager.NavigateTo("auth");
}