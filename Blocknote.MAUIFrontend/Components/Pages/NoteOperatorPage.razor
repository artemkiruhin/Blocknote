@page "/edit/{id:guid}"
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Models.Enums
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt
@using Blocknote.Core.Services.Sharing
@using System.Text
@using Microsoft.AspNetCore.Builder
@using Microsoft.JSInterop
@using System.Diagnostics

@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager
@inject ISharingService SharingService

<div class="modal">
    <div class="modal-content">
        <h2>@(Id.HasValue ? "Редактировать заметку" : "Создать новую заметку")</h2>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }
        <EditForm Model="@CurrentNote" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
                <input type="text" class="modal-input" placeholder="Заголовок заметки" @bind-value="LocalTitle" @bind-value:event="oninput" />
                <ValidationMessage For="@(() => LocalTitle)" />
            </div>
            <div>
                <input type="text" class="modal-input" placeholder="Подзаголовок (необязательно)" @bind-value="LocalSubtitle" @bind-value:event="oninput" />
            </div>
            <div>
                <textarea class="modal-textarea" placeholder="Содержание заметки (необязательно)" @bind-value="LocalContent" @bind-value:event="oninput"></textarea>
            </div>
            <div class="modal-buttons">
                <button type="button" class="modal-cancel" @onclick="OnClose">Отмена</button>
                <button type="submit" class="modal-save" disabled="@(!IsFormValid)">
                    @(Id.HasValue ? "Обновить" : "Сохранить")
                </button>
                @if (Id.HasValue)
                {
                    <button type="button" class="modal-share" @onclick="OnShare">Поделиться</button>
                    <button type="button" class="modal-delete" @onclick="ShowDeleteConfirmation">Удалить</button>
                    <button type="button" class="modal-export" @onclick="ExportToMarkdown">Экспорт в Markdown</button>
                    <button type="button" class="modal-export" @onclick="ExportToWord">Экспорт в Word</button>
                    <button type="button" class="modal-export" @onclick="ExportToPdf">Экспорт в PDF</button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid? Id { get; set; }

    private NoteDto CurrentNote { get; set; } = new NoteDto();
    private string LocalTitle { get; set; } = string.Empty;
    private string LocalSubtitle { get; set; } = string.Empty;
    private string LocalContent { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private bool ShowDeleteConfirmationModal { get; set; } = false;

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(LocalTitle);

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            await LoadNote();
        }
    }

    private async Task LoadNote()
    {
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            CurrentNote = await NoteService.GetInfoAsync(userId, Id.Value);
            if (CurrentNote != null)
            {
                LocalTitle = CurrentNote.Title;
                LocalSubtitle = CurrentNote.Subtitle;
                LocalContent = CurrentNote.Content;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Не удалось загрузить заметку: {ex.Message}";
        }
    }

    private void OnShare()
    {
        if (Id.HasValue)
        {
            var noteId = Id.Value.ToString("D"); // Ensures proper Guid format
            NavigationManager.NavigateTo($"/sharing/create/{noteId}");
        }
    }

    private async Task OnSave()
    {
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            bool result;
            if (Id.HasValue)
            {
                result = await NoteService.EditAsync(userId, Id.Value, LocalTitle, LocalSubtitle, LocalContent);
            }
            else
            {
                result = await NoteService.CreateAsync(LocalTitle, LocalSubtitle, LocalContent, userId);
            }

            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Не удалось сохранить изменения.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void ShowDeleteConfirmation() => ShowDeleteConfirmationModal = true;

    private void CancelDelete() => ShowDeleteConfirmationModal = false;

    private async Task OnDelete()
    {
        if (!Id.HasValue) return;

        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            bool result = await NoteService.DeleteAsync(userId, Id.Value);

            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Не удалось удалить заметку.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void OnClose()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ExportToMarkdown()
    {
        var markdown = $"# {LocalTitle}\n\n{(string.IsNullOrEmpty(LocalSubtitle) ? "" : $"## {LocalSubtitle}\n\n")}{LocalContent}";
        await SaveFile(markdown, LocalTitle, "md");
    }

    private async Task ExportToWord()
    {
        var formattedContent = SharingService.FormatContent(LocalContent, FormatType.Docx);
        await SaveFile(formattedContent, LocalTitle, "docx");
    }

    private async Task ExportToPdf()
    {
        var formattedContent = SharingService.FormatContent(LocalContent, FormatType.PDF);
        await SaveFile(formattedContent, LocalTitle, "pdf");
    }

    private async Task SaveFile(string content, string fileName, string fileExtension)
    {
        try
        {
            var documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            var exportPath = Path.Combine(documentsPath, "Blocknote", "Exports");
            Directory.CreateDirectory(exportPath);

            var filePath = Path.Combine(exportPath, $"{fileName}.{fileExtension}");
            await File.WriteAllTextAsync(filePath, content);
            await Application.Current.MainPage.DisplayAlert("Успешно", $"Файл сохранён в {filePath}", "OK");

            Process.Start(new ProcessStartInfo { FileName = exportPath, UseShellExecute = true });
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Ошибка", ex.Message, "OK");
        }
    }

}
