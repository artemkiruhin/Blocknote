@page "/edit/{id:guid}"
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Models.Enums
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt
@using Blocknote.Core.Services.Sharing
@using Blocknote.Core.Services.Extensions;
@using System.Text
@using Microsoft.AspNetCore.Builder
@using Microsoft.JSInterop
@using System.Diagnostics
@using iTextSharp.text
@using iTextSharp.text.pdf
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using Markdig

@inherits LayoutComponentBase
@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager
@inject ISharingService SharingService


<div class="app-container">
    <div class="main-content">
        <div class="editor-header">
            <h2 class="editor-title">
                @if (Id.HasValue)
                {
                    <i class="fas fa-edit header-icon"></i>
                    <span>Редактирование заметки</span>
                }
                else
                {
                    <i class="fas fa-file-plus header-icon"></i>
                    <span>Новая заметка</span>
                }
            </h2>

            <div class="editor-actions">
                <button class="action-btn preview-btn" @onclick="TogglePreview">
                    @if (isPreview)
                    {
                        <i class="fas fa-edit"></i>
                        <span>Редактировать</span>
                    }
                    else
                    {
                        <i class="fas fa-eye"></i>
                        <span>Предпросмотр</span>
                    }
                </button>

                <button class="action-btn save-btn" @onclick="OnSave" disabled="@(!IsFormValid)">
                    <i class="fas fa-save"></i>
                    <span>@(Id.HasValue ? "Обновить" : "Создать")</span>
                </button>
            </div>
        </div>

        <div class="editor-body">
            <div class="editor-main">
                <EditForm Model="@CurrentNote" class="editor-form">
                    <div class="editor-fields">
                        <div class="input-group">
                            <label class="input-label">
                                <i class="fas fa-heading"></i>
                                Заголовок
                            </label>
                            <input type="text" class="editor-input"
                                   @bind="LocalTitle" @bind:event="oninput" />
                        </div>

                        <div class="input-group">
                            <label class="input-label">
                                <i class="fas fa-paragraph"></i>
                                Подзаголовок
                            </label>
                            <input type="text" class="editor-input"
                                   @bind="LocalSubtitle" @bind:event="oninput" />
                        </div>

                        <div class="input-group content-group">
                            <label class="input-label">
                                <i class="fas fa-file-alt"></i>
                                Содержание
                            </label>
                            @if (isPreview)
                            {
                                <div class="preview-content">
                                    @((MarkupString)renderedContent)
                                </div>
                            }
                            else
                            {
                                <div class="editor-wrapper">
                                    <textarea class="editor-textarea"
                                              @bind="LocalContent" @bind:event="oninput"></textarea>
                                    <div class="editor-toolbar">
                                        <button class="toolbar-btn" @onclick="@(() => InsertMarkdown("bold"))">
                                            <i class="fas fa-bold"></i>
                                        </button>
                                        <button class="toolbar-btn" @onclick="@(() => InsertMarkdown("italic"))">
                                            <i class="fas fa-italic"></i>
                                        </button>
                                        <button class="toolbar-btn" @onclick="@(() => InsertMarkdown("heading"))">
                                            <i class="fas fa-heading"></i>
                                        </button>
                                        <button class="toolbar-btn" @onclick="@(() => InsertMarkdown("link"))">
                                            <i class="fas fa-link"></i>
                                        </button>
                                        <button class="toolbar-btn" @onclick="@(() => InsertMarkdown("code"))">
                                            <i class="fas fa-code"></i>
                                        </button>
                                        <button class="toolbar-btn" @onclick="@(() => InsertMarkdown("list"))">
                                            <i class="fas fa-list-ul"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </EditForm>

                <div class="editor-footer">
                    <div class="footer-actions">
                        <div class="left-actions">
                            <button class="action-btn secondary-btn" @onclick="OnClose">
                                <i class="fas fa-times"></i>
                                <span>Отмена</span>
                            </button>

                            @if (Id.HasValue)
                            {
                                <button class="action-btn share-btn" @onclick="OnShare">
                                    <i class="fas fa-share-alt"></i>
                                    <span>Поделиться</span>
                                </button>
                                <button class="action-btn danger-btn" @onclick="ShowDeleteConfirmation">
                                    <i class="fas fa-trash-alt"></i>
                                    <span>Удалить</span>
                                </button>
                            }
                        </div>

                        @if (Id.HasValue)
                        {
                            <div class="export-buttons">
                                <button class="export-btn md-btn" @onclick="ExportToMarkdown">
                                    <i class="fas fa-file-alt"></i>
                                    <span>MD</span>
                                </button>
                                <button class="export-btn html-btn" @onclick="ExportToHTML">
                                    <i class="fas fa-code"></i>
                                    <span>HTML</span>
                                </button>
                                <button class="export-btn docx-btn" @onclick="ExportToWord">
                                    <i class="fas fa-file-word"></i>
                                    <span>DOCX</span>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="markdown-help">
                <h3><i class="fas fa-book"></i> Markdown Guide</h3>
                <div class="help-content">
                    <div class="help-section">
                        <h4>Заголовки</h4>
                        <code># Заголовок 1</code>
                        <code>## Заголовок 2</code>
                        <code>### Заголовок 3</code>
                    </div>
                    <div class="help-section">
                        <h4>Форматирование текста</h4>
                        <code>**Жирный текст**</code>
                        <code>*Курсив*</code>
                        <code>`Код`</code>
                    </div>
                    <div class="help-section">
                        <h4>Списки</h4>
                        <code>- Пункт списка</code>
                        <code>1. Нумерованный список</code>
                    </div>
                    <div class="help-section">
                        <h4>Ссылки и изображения</h4>
                        <code>[Текст ссылки](URL)</code>
                        <code>![Alt текст](URL изображения)</code>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowDeleteConfirmationModal)
{
    <div class="modal-overlay">
        <div class="modal-confirmation">
            <i class="fas fa-exclamation-triangle warning-icon"></i>
            <p>Вы уверены, что хотите удалить эту заметку?</p>
            <div class="modal-buttons">
                <button class="modal-btn cancel-btn" @onclick="CancelDelete">
                    <i class="fas fa-times"></i>
                    <span>Отмена</span>
                </button>
                <button class="modal-btn delete-btn" @onclick="OnDelete">
                    <i class="fas fa-trash-alt"></i>
                    <span>Удалить</span>
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }

    private NoteDto CurrentNote { get; set; } = new NoteDto();
    private string LocalTitle { get; set; } = string.Empty;
    private string LocalSubtitle { get; set; } = string.Empty;
    private string LocalContent { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private bool ShowDeleteConfirmationModal { get; set; } = false;
    private MarkdownPipeline _markdownPipeline;
    private bool isPreview = false;
    private string renderedContent = string.Empty;

    [Inject] AuthValidator AuthValidator { get; set; }

    private void TogglePreview()
    {
        isPreview = !isPreview;
        if (isPreview)
        {
            renderedContent = Markdown.ToHtml(LocalContent ?? "", _markdownPipeline);
        }
    }

    private bool IsFormValid => !string.IsNullOrWhiteSpace(LocalTitle);

    protected override async Task OnInitializedAsync()
    {
        _markdownPipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build();

        if (Id.HasValue)
        {
            await LoadNote();
        }
    }

    private async Task LoadNote()
    {
        try
        {
            (bool result, Guid userId) = await AuthValidator.ValidateUser();
            if (!result) NavigationManager.NavigateTo("auth");

            CurrentNote = await NoteService.GetInfoAsync(userId, Id.Value);
            if (CurrentNote != null)
            {
                LocalTitle = CurrentNote.Title;
                LocalSubtitle = CurrentNote.Subtitle;
                LocalContent = CurrentNote.Content;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Не удалось загрузить заметку: {ex.Message}";
        }
    }

    private void OnShare()
    {
        if (Id.HasValue)
        {
            var noteId = Id.Value.ToString("D");
            NavigationManager.NavigateTo($"/sharing/create/{noteId}");
        }
    }

    private async Task OnSave()
    {
        try
        {
            (bool result, Guid userId) = await AuthValidator.ValidateUser();
            if (!result) NavigationManager.NavigateTo("auth");

            bool resultOperation;
            if (Id.HasValue)
            {
                resultOperation = await NoteService.EditAsync(userId, Id.Value, LocalTitle, LocalSubtitle, LocalContent);
            }
            else
            {
                resultOperation = await NoteService.CreateAsync(LocalTitle, LocalSubtitle, LocalContent, userId);
            }

            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Не удалось сохранить изменения.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void ShowDeleteConfirmation() => ShowDeleteConfirmationModal = true;

    private void CancelDelete() => ShowDeleteConfirmationModal = false;

    private async Task OnDelete()
    {
        if (!Id.HasValue) return;

        try
        {
            (bool result, Guid userId) = await AuthValidator.ValidateUser();
            if (!result) NavigationManager.NavigateTo("auth");

            bool resultOperation = await NoteService.DeleteAsync(userId, Id.Value);

            if (resultOperation)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Не удалось удалить заметку.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void OnClose()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfBytes = TextFormatter.FormatPdf(LocalTitle, LocalSubtitle, LocalContent);
            if (pdfBytes != null && pdfBytes.Length > 0)
            {
                var fileName = $"{LocalTitle}.pdf";
                var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), fileName);

                await File.WriteAllBytesAsync(filePath, pdfBytes);

                await Application.Current.MainPage.DisplayAlert("Успешно", $"Файл сохранён в {filePath}", "OK");
                Process.Start(new ProcessStartInfo { FileName = Path.GetDirectoryName(filePath), UseShellExecute = true });
            }
            else
            {
                await Application.Current.MainPage.DisplayAlert("Ошибка", "Не удалось создать PDF", "OK");
            }
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Ошибка", ex.Message, "OK");
        }
    }


    private async Task ExportToHTML()
    {
        try
        {
            var html = TextFormatter.FormatHtml(LocalTitle, LocalSubtitle, LocalContent);
            await SaveFile(html, LocalTitle, "html");
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Ошибка", ex.Message, "OK");
        }
    }

    private async Task ExportToWord()
    {
        try
        {
            var docxDocument = TextFormatter.FormatDocx(LocalTitle, LocalSubtitle, LocalContent);

            var documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            var exportPath = Path.Combine(documentsPath, "Blocknote", "Exports");
            Directory.CreateDirectory(exportPath);

            var filePath = Path.Combine(exportPath, $"{LocalTitle}.docx");
            await File.WriteAllBytesAsync(filePath, docxDocument);

            await Application.Current.MainPage.DisplayAlert("Успешно", $"Файл сохранён в {filePath}", "OK");

            Process.Start(new ProcessStartInfo { FileName = exportPath, UseShellExecute = true });
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Ошибка", ex.Message, "OK");
        }
    }

    private async Task ExportToMarkdown()
    {
        var markdown = TextFormatter.FormatMarkdown(LocalTitle, LocalSubtitle, LocalContent);
        await SaveFile(markdown, LocalTitle, "md");
    }

    private async Task SaveFile(string content, string fileName, string fileExtension)
    {
        try
        {
            var documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            var exportPath = Path.Combine(documentsPath, "Blocknote", "Exports");
            Directory.CreateDirectory(exportPath);

            var filePath = Path.Combine(exportPath, $"{fileName}.{fileExtension}");
            await File.WriteAllTextAsync(filePath, content);
            await Application.Current.MainPage.DisplayAlert("Успешно", $"Файл сохранён в {filePath}", "OK");

            Process.Start(new ProcessStartInfo { FileName = exportPath, UseShellExecute = true });
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Ошибка", ex.Message, "OK");
        }
    }

    protected override void OnParametersSet()
    {
        if (!Id.HasValue)
        {
            CurrentNote = new NoteDto();
            LocalTitle = string.Empty;
            LocalSubtitle = string.Empty;
            LocalContent = string.Empty;
        }
    }

    private void InsertMarkdown(string type)
    {
        string insert = type switch
        {
            "bold" => "**Bold Text**",
            "italic" => "*Italic Text*",
            "heading" => "# Heading",
            "link" => "[Link Text](url)",
            "code" => "`code`",
            "list" => "- List item",
            _ => string.Empty
        };

        if (!string.IsNullOrEmpty(insert))
        {
            LocalContent = LocalContent + "\n" + insert;
        }
    }
}