@page "/edit/{id:guid}"
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt

@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<div class="modal">
    <div class="modal-content">
        <h2>@(Id.HasValue ? "Редактировать заметку" : "Создать новую заметку")</h2>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }
        <EditForm Model="@CurrentNote" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
                <input type="text"
                       class="modal-input"
                       placeholder="Заголовок заметки"
                       @bind-value="LocalTitle"
                       @bind-value:event="oninput" />
                <ValidationMessage For="@(() => LocalTitle)" />
            </div>
            <div>
                <input type="text"
                       class="modal-input"
                       placeholder="Подзаголовок (необязательно)"
                       @bind-value="LocalSubtitle"
                       @bind-value:event="oninput" />
            </div>
            <div>
                <textarea class="modal-textarea"
                          placeholder="Содержание заметки (необязательно)"
                          @bind-value="LocalContent"
                          @bind-value:event="oninput"></textarea>
            </div>
            <div class="modal-buttons">
                <button type="button" class="modal-cancel" @onclick="OnClose">Отмена</button>
                <button type="submit" class="modal-save" disabled="@(!IsFormValid)">
                    @(Id.HasValue ? "Обновить" : "Сохранить")
                </button>
                @if (Id.HasValue)
                {
                    <button type="button" class="modal-delete" @onclick="ShowDeleteConfirmation">Удалить</button>
                }
            </div>
        </EditForm>
    </div>
</div>

@if (ShowDeleteConfirmationModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>Подтверждение удаления</h2>
            <p>Вы уверены, что хотите удалить эту заметку?</p>
            <div class="modal-buttons">
                <button class="modal-cancel" @onclick="CancelDelete">Отмена</button>
                <button class="modal-delete" @onclick="OnDelete">Удалить</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }

    private NoteDto CurrentNote { get; set; } = new NoteDto();
    private string LocalTitle { get; set; } = string.Empty;
    private string LocalSubtitle { get; set; } = string.Empty;
    private string LocalContent { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private bool ShowDeleteConfirmationModal { get; set; } = false;

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(LocalTitle);

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            await LoadNote();
        }
    }

    private async Task LoadNote()
    {
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            CurrentNote = await NoteService.GetInfoAsync(userId, Id.Value);
            if (CurrentNote != null)
            {
                LocalTitle = CurrentNote.Title;
                LocalSubtitle = CurrentNote.Subtitle;
                LocalContent = CurrentNote.Content;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Не удалось загрузить заметку: {ex.Message}";
        }
    }

    private async Task OnSave()
    {
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            bool result;
            if (Id.HasValue)
            {
                result = await NoteService.EditAsync(userId, Id.Value, LocalTitle, LocalSubtitle, LocalContent);
            }
            else
            {
                result = await NoteService.CreateAsync(LocalTitle, LocalSubtitle, LocalContent, userId);
            }

            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Не удалось сохранить изменения.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void ShowDeleteConfirmation() => ShowDeleteConfirmationModal = true;

    private void CancelDelete() => ShowDeleteConfirmationModal = false;

    private async Task OnDelete()
    {
        if (!Id.HasValue) return;

        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            bool result = await NoteService.DeleteAsync(userId, Id.Value);

            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Не удалось удалить заметку.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void OnClose()
    {
        NavigationManager.NavigateTo("/");
    }
}