@page "/sharing/create/{NoteId:guid}"
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Jwt
@using Blocknote.Core.Services.Sharing
@inject ISharingService SharingService
@inject NavigationManager NavigationManager
@inject IJwtService JwtService
@inject IJSRuntime JSRuntime

<div class="modal">
    <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Share Note</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
                <div class="error-message">
                @errorMessage
                </div>
        }

        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="mb-4">
                <label class="block text-sm font-medium mb-2">Sharing Type</label>
                <InputSelect @bind-Value="model.Type" class="modal-input">
                    @foreach (var type in Enum.GetValues(typeof(SharingType)))
                    {
                            <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium mb-2">Close Date</label>
                <InputDate @bind-Value="model.CloseAt" 
                           class="modal-input" 
                           min="@DateTime.UtcNow.ToString("yyyy-MM-dd")" />
            </div>

            <ValidationMessage For="@(() => model.CloseAt)" />

            <div class="modal-buttons">
                <button type="button" class="modal-cancel" @onclick="NavigateBack" disabled="@isProcessing">
                    Cancel
                </button>
                <button type="submit" class="modal-save" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                            <span class="loading-spinner"></span>
                    }
                    Create Sharing Link
                </button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(sharingCode))
        {
                <div class="mt-4 p-4 bg-gray-800 rounded-lg">
                    <div class="flex justify-between items-center">
                        <span class="text-sm font-medium">Sharing Code:</span>
                        <button class="text-blue-500 hover:text-blue-400" @onclick="CopyToClipboard">
                            Copy
                        </button>
                    </div>
                    <div class="mt-2 break-all">
                    @sharingCode
                    </div>
                @if (isCopied)
                {
                            <div class="text-green-500 text-sm mt-2">Copied to clipboard!</div>
                }
                </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid NoteId { get; set; }

    private SharingNoteCreateModel model = new();
    private bool isProcessing;
    private bool isCopied = false;
    private string sharingCode = string.Empty;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        model.CloseAt = DateTime.UtcNow.AddDays(7);
        model.Type = SharingType.All;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isProcessing = true;
            isCopied = false; // Reset copy state
            errorMessage = string.Empty;

            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                errorMessage = "Authentication error.";
                return;
            }

            sharingCode = await SharingService.CreateSharingCodeAsync(userId, NoteId, model.CloseAt, model.Type);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/notes");
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(sharingCode))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", sharingCode);
            isCopied = true;

            // Reset the copy state after a few seconds
            _ = Task.Delay(3000).ContinueWith(_ => isCopied = false);
        }
    }

    private class SharingNoteCreateModel
    {
        public SharingType Type { get; set; }
        public DateTime CloseAt { get; set; }
    }
}
