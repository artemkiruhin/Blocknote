@using Blocknote.Api.Contracts
@using Blocknote.Api.Controllers
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt

@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<div class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>@(!Id.HasValue ? "Добавить заметку" : "Редактировать заметку")</h2>
            <button class="modal-close" @onclick="OnClose">×</button>
        </div>
        <div class="modal-body">
            <input
                @bind="LocalTitle"
                class="modal-input"
                placeholder="Заголовок заметки"
                type="text"
            />
            <input
                @bind="LocalSubtitle"
                class="modal-input"
                placeholder="Подзаголовок заметки (необязательно)"
                type="text"
            />
            <textarea
                @bind="LocalContent"
                class="modal-textarea"
                placeholder="Содержание заметки"
                rows="6"
            ></textarea>
        </div>
        <div class="modal-footer">
            <button class="modal-cancel" @onclick="OnClose">Отмена</button>
            <button class="modal-save" @onclick="OnSave" disabled="@(!IsFormValid)">Сохранить</button>
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="modal-error">@ErrorMessage</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string? Subtitle { get; set; }

    [Parameter]
    public string? Content { get; set; }

    [Parameter]
    public EventCallback OnCloseModal { get; set; }

    private string LocalTitle { get; set; } = string.Empty;
    private string LocalSubtitle { get; set; } = string.Empty;
    private string LocalContent { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(LocalTitle) &&
        !string.IsNullOrWhiteSpace(LocalContent);

    protected override void OnInitialized()
    {
        LocalTitle = Title ?? string.Empty;
        LocalSubtitle = Subtitle ?? string.Empty;
        LocalContent = Content ?? string.Empty;
    }

    private async Task OnSave()
    {
        ErrorMessage = string.Empty;

        if (!IsFormValid)
        {
            ErrorMessage = "Заголовок и содержание заметки обязательны.";
            return;
        }

        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            bool result;

            if (Id.HasValue)
            {
                result = await NoteService.EditAsync(userId, Id.Value, LocalTitle, LocalSubtitle, LocalContent);
            }
            else
            {
                result = await NoteService.CreateAsync(LocalTitle, LocalSubtitle, LocalContent, userId);
            }

            if (!result)
            {
                ErrorMessage = "Не удалось сохранить изменения. Попробуйте снова.";
                return;
            }

            await OnCloseModal.InvokeAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private async Task OnClose()
    {
        await OnCloseModal.InvokeAsync();
    }
}