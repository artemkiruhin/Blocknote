@using Markdig
@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt
@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<div class="modal" @onclick="HandleBackgroundClick">
    <div class="modal-content markdown-modal" @onclick:stopPropagation>
        <div class="modal-header">
            <h2><i class="oi oi-document"></i> Создать новую заметку</h2>
            <button type="button" class="close-button" @onclick="OnClose">
                <i class="oi oi-x"></i>
            </button>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">
                <i class="oi oi-warning"></i>
                @ErrorMessage
            </div>
        }

        <EditForm Model="@newNote" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div class="input-group">
                <i class="oi oi-header input-icon"></i>
                <input type="text"
                       class="modal-input"
                       placeholder="Заголовок заметки"
                       @bind-value="newNote.Title"
                       @bind-value:event="oninput" />
                <ValidationMessage For="@(() => newNote.Title)" />
            </div>

            <div class="input-group">
                <i class="oi oi-text input-icon"></i>
                <input type="text"
                       class="modal-input"
                       placeholder="Подзаголовок (необязательно)"
                       @bind-value="newNote.Subtitle"
                       @bind-value:event="oninput" />
            </div>

            <div class="editor-container">
                <div class="editor-section">
                    <div class="editor-header">
                        <span><i class="oi oi-pencil"></i> Редактор</span>
                        <button type="button" class="preview-toggle" @onclick="TogglePreview">
                            @if (showPreview)
                            {
                                <i class="oi oi-pencil"></i>
                                <span>Редактировать</span>
                            }
                            else
                            {
                                <i class="oi oi-eye"></i>
                                <span>Предпросмотр</span>
                            }
                        </button>
                    </div>
                    @if (!showPreview)
                    {
                        <textarea class="modal-textarea"
                                  placeholder="Содержание заметки (поддерживается Markdown)"
                                  @bind-value="newNote.Content"
                                  @bind-value:event="oninput"></textarea>
                    }
                    else
                    {
                        <div class="preview-content">
                            @((MarkupString)ConvertToHtml(newNote.Content))
                        </div>
                    }
                </div>
                <div class="markdown-hints">
                    <h3><i class="oi oi-lightbulb"></i> Подсказки по форматированию</h3>
                    <div class="hints-content">
                        @foreach (var hint in markdownHints)
                        {
                            <div class="hint-item">
                                <code>@hint.Syntax</code>
                                <span>@hint.Description</span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="modal-buttons">
                <button type="button" class="modal-cancel" @onclick="OnClose">
                    <i class="oi oi-x"></i> Отмена
                </button>
                <button type="submit" class="modal-save" disabled="@(!IsFormValid)">
                    <i class="oi oi-check"></i> Сохранить
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnNoteCreated { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Inject] AuthValidator AuthValidator { get; set; }

    private NoteDto newNote = new();
    private string? ErrorMessage { get; set; }
    private bool IsFormValid => !string.IsNullOrWhiteSpace(newNote.Title);
    private bool showPreview = false;

    private record MarkdownHint(string Syntax, string Description);

    private readonly MarkdownHint[] markdownHints = new[]
    {
        new MarkdownHint("# Заголовок", "Заголовок 1 уровня"),
        new MarkdownHint("## Подзаголовок", "Заголовок 2 уровня"),
        new MarkdownHint("**текст**", "Жирный текст"),
        new MarkdownHint("*текст*", "Курсив"),
        new MarkdownHint("- элемент", "Маркированный список"),
        new MarkdownHint("1. элемент", "Нумерованный список"),
        new MarkdownHint("```код```", "Блок кода"),
        new MarkdownHint("[текст](ссылка)", "Ссылка"),
        new MarkdownHint("> цитата", "Цитата")
    };

    private void TogglePreview()
    {
        showPreview = !showPreview;
    }

    private string ConvertToHtml(string markdown)
    {
        if (string.IsNullOrEmpty(markdown))
            return string.Empty;

        return Markdig.Markdown.ToHtml(markdown, new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build());
    }

    private async Task OnSave()
    {
        try
        {
            (bool result, Guid userId) = await AuthValidator.ValidateUser();
            if (!result) NavigationManager.NavigateTo("auth");

            var resultOperation = await NoteService.CreateAsync(
                newNote.Title,
                newNote.Subtitle,
                newNote.Content,
                userId
            );

            if (resultOperation)
            {
                await OnNoteCreated.InvokeAsync();
                await OnClose.InvokeAsync();
            }
            else
            {
                ErrorMessage = "Не удалось создать заметку.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void HandleBackgroundClick()
    {
        OnClose.InvokeAsync();
    }
}