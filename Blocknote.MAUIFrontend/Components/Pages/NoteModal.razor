@using Blocknote.Core.Models.Dtos
@using Blocknote.Core.Services.Base
@using Blocknote.Core.Services.Entity
@using Blocknote.Core.Services.Jwt

@inject INoteService NoteService
@inject IJwtService JwtService
@inject NavigationManager NavigationManager

<div class="modal" @onclick="HandleBackgroundClick">
    <div class="modal-content" @onclick:stopPropagation>
        <h2>Создать новую заметку</h2>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }

        <EditForm Model="@newNote" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
                <input type="text"
                       class="modal-input"
                       placeholder="Заголовок заметки"
                       @bind-value="newNote.Title"
                       @bind-value:event="oninput" />
                <ValidationMessage For="@(() => newNote.Title)" />
            </div>
            <div>
                <input type="text"
                       class="modal-input"
                       placeholder="Подзаголовок (необязательно)"
                       @bind-value="newNote.Subtitle"
                       @bind-value:event="oninput" />
            </div>
            <div>
                <textarea class="modal-textarea"
                          placeholder="Содержание заметки (необязательно)"
                          @bind-value="newNote.Content"
                          @bind-value:event="oninput"></textarea>
            </div>
            <div class="modal-buttons">
                <button type="button" class="modal-cancel" @onclick="OnClose">Отмена</button>
                <button type="submit" class="modal-save" disabled="@(!IsFormValid)">Сохранить</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnNoteCreated { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private NoteDto newNote = new();
    private string? ErrorMessage { get; set; }

    private bool IsFormValid => !string.IsNullOrWhiteSpace(newNote.Title);

    private async Task OnSave()
    {
        try
        {
            var token = await SecureStorage.Default.GetAsync("jwt");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("auth");
                return;
            }

            var userId = JwtService.GetUserId(token);
            if (userId == Guid.Empty)
            {
                ErrorMessage = "Ошибка авторизации.";
                return;
            }

            var result = await NoteService.CreateAsync(newNote.Title, newNote.Subtitle, newNote.Content, userId);
            if (result)
            {
                await OnNoteCreated.InvokeAsync();
                await OnClose.InvokeAsync();
            }
            else
            {
                ErrorMessage = "Не удалось создать заметку.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void HandleBackgroundClick()
    {
        OnClose.InvokeAsync();
    }
}